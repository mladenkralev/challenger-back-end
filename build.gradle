plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '7.1.0'
    id 'java'
}

group = 'com.challenger'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainersVersion', "1.15.3")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation('org.springframework.boot:spring-boot-starter-validation')

    implementation 'javax.xml.bind:jaxb-api'

    implementation 'mysql:mysql-connector-java'
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation "org.testcontainers:mysql:1.16.0"
}

test {
    useJUnitPlatform()
}

bootJar {
    archiveBaseName = 'challenger-backend'
    archiveVersion = '1.0.0'
    archiveFileName = 'challenger-backend.jar'
}

docker {
    springBootApplication {
        baseImage = 'adoptopenjdk/openjdk11'
        ports = [8080, 8080]
        images = ['challenger:0.2']
//        jvmArgs = ['-Dspring.profiles.active=production', '-Xmx2048m']
    }
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}
